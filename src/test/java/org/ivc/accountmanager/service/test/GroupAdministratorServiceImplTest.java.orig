/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ivc.accountmanager.service.test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;
import org.fest.assertions.api.Assertions;
import static org.fest.assertions.api.Assertions.fail;
import static org.ivc.accountmanager.config.Role.ROCKET_ADMIN;
import org.ivc.accountmanager.config.SecurityConfig;
import org.ivc.accountmanager.config.ValidatorConfig;
import org.ivc.accountmanager.domain.User;
import org.ivc.accountmanager.repository.UserRepository;
import org.ivc.accountmanager.service.GroupAdministratorService;
import org.ivc.accountmanager.service.GroupAdministratorServiceImpl;
import org.ivc.accountmanager.service.UserService;
import org.ivc.accountmanager.web.ExceptionHandlerAdvice;
import org.ivc.accountmanager.web.TrimmerAdvice;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.security.test.context.support.WithMockUser;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;
import org.springframework.web.context.WebApplicationContext;
import javax.validation.ConstraintViolationException;
/**
 *
 * @author Администратор
 */
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@SpringApplicationConfiguration
@ActiveProfiles("test")
public class GroupAdministratorServiceImplTest {

    //-------------------Inner classes--------------------------------------------
    @SpringBootApplication
    @Import({SecurityConfig.class, GroupAdministratorServiceImpl.class, ExceptionHandlerAdvice.class,
        TrimmerAdvice.class,ValidatorConfig.class})
    public static class GroupAdministratorRestControllerTestConfig {
    }
    //-------------------Constants------------------------------------------------
    private static final String EMPTY_LOGIN_ERROR_MESSAGE = "Parameter " + User.JSON_UID_PROPERTY + " can't be an empty string.";
    private static final String EMPTY_GRUOP_ERROR_MASSAGE = "name group can't be an empty string";
    private static final ObjectReader jsonReader = new ObjectMapper().reader();
    private static final String USER_ID = "Batmem";
    private static final String VALID_USER_PASSWORD = "123";
    private static final String PASSWORD = "password";
    private static final String COMMONNAME = "ValUser11";
    private static final String SHORTNAME = "Val";
    private static final String ADMIN_ORGANIZATION_NAME = "Organization11";
    private static final ObjectWriter jsonWriter = new ObjectMapper().writer();
    private static final String ADMIN_ID = "rocketAdmin";
    private static final String VALID_GROUP = "validGroup";
    private final List<User> VALID_USERS
            = new ArrayList<>(Arrays.asList(new User[]{
                new User("000", "000", "Admin user", "Admin", "org1", true),
                new User("111", "000", "Simple user", "Simple", "org2", true)}));
    private static final ObjectMapper mapper = new ObjectMapper();
       private static final String EMPTY_PASSWORD_ERROR_MESSAGE
            = "Parameter " + User.PASSWORD_PROPERTY + " can't be an empty string.";
    //-------------------Fields--------------------------------------------------- 
    private User VALID_USER = new User(USER_ID, VALID_USER_PASSWORD, COMMONNAME, SHORTNAME, "AAAAA", true);
    private User rocketAdmin =  new User(ADMIN_ID, VALID_USER_PASSWORD, COMMONNAME, SHORTNAME, ADMIN_ORGANIZATION_NAME, true);
    @Autowired
    private WebApplicationContext webApplicationContext;

    @Mock
    UserService userService;
    @Mock
    UserRepository userRepository;

    @Autowired
    private GroupAdministratorService groupAdministratorService;
    private MockMvc mockMvc;

    //-------------------Before tests------------------------------------------
    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);
        mockMvc = webAppContextSetup(webApplicationContext)
                .apply(springSecurity())
                .build();
        groupAdministratorService.setUserControlService(userService);
        groupAdministratorService.setUserRepository(userRepository);
       
    }

    //-------------------Tests-------------------------------------------------
    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void testShouldCreateUser() throws Exception {
        rocketAdmin.setOrganizationName(ADMIN_ORGANIZATION_NAME);
        User controlUser = new User(USER_ID, VALID_USER_PASSWORD, COMMONNAME, SHORTNAME, "AAAAA", true);
        when(userRepository.findByUid(ADMIN_ID)).thenReturn(rocketAdmin);
        controlUser.setOrganizationName(ADMIN_ORGANIZATION_NAME);
        controlUser.setRole(VALID_GROUP);
        when(userService.create(VALID_USER)).thenReturn(VALID_USER);
        assertEquals(controlUser, groupAdministratorService.createUser(VALID_USER, VALID_GROUP));
        verify(userService).create(controlUser);
    }

    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void CreateUserShouldThrowsEmptyGroupNullExcaption() {
            groupAdministratorService.createUser(VALID_USER, null);
    }

    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void CreateUserShouldThrowsEmptyGroupConstraintViolationException() {
            groupAdministratorService.createUser(VALID_USER, "");
    }

    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void TestGetUserListBy() throws Exception {
        User rocketAdmin = new User();
        rocketAdmin.setOrganizationName(ADMIN_ORGANIZATION_NAME);
        VALID_USERS.get(0).setDn(null);
        VALID_USERS.get(0).setPasswordWithoutEncoding(null);
        VALID_USERS.get(1).setDn(null);
        VALID_USERS.get(1).setPasswordWithoutEncoding(null);
        List<User> listGroupUser = new LinkedList<>(VALID_USERS);
        listGroupUser.add(new User("User1", PASSWORD, COMMONNAME, SHORTNAME, COMMONNAME, true));
        listGroupUser.add(new User("User2", PASSWORD, COMMONNAME, SHORTNAME, COMMONNAME, true));
        listGroupUser.add(new User("User3", PASSWORD, COMMONNAME, SHORTNAME, COMMONNAME, true));
        when(userService.findByGroupName(VALID_GROUP)).thenReturn(listGroupUser);
        List<User> listOrganizationUser = new LinkedList<>(VALID_USERS);
        when(userRepository.findByOrganization(ADMIN_ORGANIZATION_NAME)).thenReturn(listOrganizationUser);
        when(userRepository.findByUid(ADMIN_ID)).thenReturn(rocketAdmin);
        List<User> users = groupAdministratorService.UserList(VALID_GROUP);
        Assertions.assertThat(users).hasSize(VALID_USERS.size()).
                containsOnly(VALID_USERS.toArray(new User[0]));
    }

    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void GetUserListShouldThrowsEmptyGroupIllegalArgumentExcaption() {
            groupAdministratorService.UserList("");
    }

    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void GetUserListShouldThrowsEmptyGroupNullExcaption() {
            groupAdministratorService.UserList(null);
    }

    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void TestDeleteUser() throws Exception {
        when(userRepository.findByUid(VALID_USER.getId())).thenReturn(VALID_USER);
        groupAdministratorService.deleteUser(VALID_USER);
        verify(userService).delete(VALID_USER);
    }

    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void DeleteUserListShouldThrowsEmptyGroupIllegalArgumentExcaption() {
        try {
            VALID_USER.setId("");
            groupAdministratorService.deleteUser(VALID_USER);
            fail("Has not generated an exception ");
        } catch (IllegalArgumentException e) {
            assertEquals(EMPTY_LOGIN_ERROR_MESSAGE, e.getMessage());
        }
    }

    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void DeleteUserShouldThrowsEmptyGroupNullExcaption() {
        try {
            VALID_USER.setId(null);
            groupAdministratorService.deleteUser(VALID_USER);
            fail("Has not generated an exception ");
        } catch (NullPointerException e) {
            assertEquals(EMPTY_LOGIN_ERROR_MESSAGE, e.getMessage());
        }
    }

    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void TestUpdateUser() throws Exception {
        //arrange
        User rocketAdmin = new User();
        User old = new User(USER_ID, VALID_USER_PASSWORD, "BBB", "BBB", "BBB", true);
        rocketAdmin.setOrganizationName(ADMIN_ORGANIZATION_NAME);
        rocketAdmin.setId(ADMIN_ID);
        List<User> groupList = new LinkedList<>();
        groupList.add(old);
        List<User> organizationList = new LinkedList<>();
        organizationList.add(old);
        when(userRepository.findByUid(ADMIN_ID)).thenReturn(rocketAdmin);
        when(userRepository.findByUid(VALID_USER.getId())).thenReturn(old);
        when(userRepository.findByOrganization(ADMIN_ORGANIZATION_NAME)).thenReturn(organizationList);
        when(userService.findByGroupName(VALID_GROUP)).thenReturn(groupList);
        //act
        groupAdministratorService.updateUser(old, VALID_GROUP);
        old.setCommonName(VALID_USER.getCommonName());
        old.setShortName(VALID_USER.getShortName());
        old.setActive(VALID_USER.isActive());
        //assert
        verify(userRepository).update(old);
    }
    
    
    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void UpdateUserShouldThrowsEmptyGroupIllegalArgumentException() {
            groupAdministratorService.updateUser(VALID_USER, "");
    }
    
    
    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void UpdateUserShouldThrowsEmptyGroupNullExcaption() {
            groupAdministratorService.updateUser(VALID_USER, null);
    }

    @Test
    @WithMockUser(roles = "ADMIN")
    public void testChangeUserPassword() throws Exception {
        // arrange
        User user = new User(USER_ID, VALID_USER_PASSWORD, COMMONNAME, SHORTNAME, "AAAAA", true);
        when(userService.changePassword(user))
                .thenReturn(user);
        // act & assert
        User receivedUser   = groupAdministratorService.changePassword(user);
        user.setPassword(VALID_USER_PASSWORD);
        verify(userService).changePassword(user);
        assertEquals(user,receivedUser);
    }
    
    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void ChangeUserPasswordShouldThrowsEmptyGroupIllegalArgumentException() {
        try {
          VALID_USER.setId("");
          groupAdministratorService.changePassword(VALID_USER);
            fail("Has not generated an exception ");
        } catch (IllegalArgumentException e) {
            assertEquals(EMPTY_LOGIN_ERROR_MESSAGE, e.getMessage());
        }
    }
    
    
    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void ChangeUserPasswordShouldThrowsEmptyGroupNullExcaption() {
        try {
          VALID_USER.setId(null);
          groupAdministratorService.changePassword(VALID_USER);
            fail("Has not generated an exception ");
        } catch (NullPointerException e) {
            assertEquals(EMPTY_LOGIN_ERROR_MESSAGE, e.getMessage());
        }
    }
    
    @Test
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void hangeUserPasswordShouldThrowsForNullPassword(){
        try{
          VALID_USER.setPassword(null);
          groupAdministratorService.changePassword(VALID_USER);
          fail("Has not generated an exception ");
        }catch(IllegalArgumentException e){
             assertEquals(EMPTY_PASSWORD_ERROR_MESSAGE, e.getMessage());
        }
    }
    
    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void CreateUserShouldThrowsNullUserException() {
            groupAdministratorService.createUser(null,VALID_GROUP);
    }
    
    @Test(expected = ConstraintViolationException.class)
    @WithMockUser(roles = ROCKET_ADMIN, username = ADMIN_ID)
    public void UpdateUserShouldThrowsNullUserException() {
            groupAdministratorService.updateUser(null, VALID_GROUP);
    }
}
